{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Box","props","css","textAlign","App","brand","wbcBrand","height","columns","left","width","htmlFor","name","top","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QASMA,EAAM,SAAAC,GAAK,OAAI,iCAAKC,IAAK,CAAEC,UAAW,UAAeF,KAuE5CG,MArEf,WACE,OACE,YAAC,IAAD,CAAKC,MAAOC,KACV,mBAAKJ,IAAK,CAAEK,OAAQ,UACpB,YAAC,IAAD,KACE,YAAC,IAAD,CAAMC,QAAS,GACb,YAAC,IAAD,CAAMC,KAAM,EAAGC,MAAO,GACpB,iBAAGR,IAAK,CAAEC,UAAW,WAArB,wUAQA,iBAAGD,IAAK,CAAEC,UAAW,WACnB,gEAGJ,YAAC,IAAD,CAAMM,KAAM,GACV,YAAC,EAAD,KACE,YAAC,IAAD,CAAWE,QAAQ,YAAnB,YACA,YAAC,IAAD,gCAGJ,YAAC,IAAD,CAAMD,MAAO,GACX,YAAC,IAAD,CAAUE,KAAK,cAEjB,YAAC,IAAD,CAAMH,KAAM,EAAGI,IAAK,GAClB,YAAC,EAAD,KACE,YAAC,IAAD,CAAWF,QAAQ,aAAnB,gBAGJ,YAAC,IAAD,CAAMF,KAAM,EAAGI,IAAK,EAAGH,MAAO,GAC5B,YAAC,IAAD,CAAME,KAAK,eAEb,YAAC,IAAD,CAAMH,KAAM,EAAGI,IAAK,GAClB,YAAC,EAAD,KACE,YAAC,IAAD,CAAWF,QAAQ,YAAnB,eAGJ,YAAC,IAAD,CAAMF,KAAM,EAAGI,IAAK,EAAGH,MAAO,GAC5B,YAAC,IAAD,CAAME,KAAK,cAEb,YAAC,IAAD,CAAMH,KAAM,EAAGI,IAAK,GAClB,YAAC,EAAD,KACE,YAAC,IAAD,CAAWF,QAAQ,YAAnB,iCAKJ,YAAC,IAAD,CAAMF,KAAM,EAAGI,IAAK,EAAGH,MAAO,GAC5B,YAAC,IAAD,KACE,YAAC,IAAD,cACA,YAAC,IAAD,cACA,YAAC,IAAD,0BAGJ,YAAC,IAAD,CAAMD,KAAM,EAAGI,IAAK,EAAGH,MAAO,GAC5B,YAAC,IAAD,oBC1DQI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ef2fb7d5.chunk.js","sourcesContent":["/** @jsx jsx */\n\nimport wbcBrand from \"@westpac/wbc\";\nimport { GEL, jsx } from \"@westpac/core\";\nimport { Container, Cell, Grid } from \"@westpac/grid\";\nimport { FormLabel, Hint } from \"@westpac/form\";\nimport { Text, Textarea } from \"@westpac/text-input\";\nimport { Button, ButtonGroup } from \"@westpac/button\";\n\nconst Box = props => <div css={{ textAlign: \"right\" }} {...props} />;\n\nfunction App() {\n  return (\n    <GEL brand={wbcBrand}>\n      <div css={{ height: \"4rem\" }} />\n      <Container>\n        <Grid columns={5}>\n          <Cell left={2} width={3}>\n            <p css={{ textAlign: \"center\" }}>\n              Westpac welcomes any feedback you might have regarding how we make\n              products and services accessible for customers with disability.\n              Whether you want to share a complaint, a compliment or a\n              suggestion to help us do things better, weâ€™d like to hear from\n              you. Your feedback will give us the opportunity to put things\n              right.\n            </p>\n            <p css={{ textAlign: \"center\" }}>\n              <strong>Please complete all fields below</strong>\n            </p>\n          </Cell>\n          <Cell left={2}>\n            <Box>\n              <FormLabel htmlFor=\"feedback\">Feedback</FormLabel>\n              <Hint>Maxium 500 characters</Hint>\n            </Box>\n          </Cell>\n          <Cell width={2}>\n            <Textarea name=\"feedback\" />\n          </Cell>\n          <Cell left={2} top={3}>\n            <Box>\n              <FormLabel htmlFor=\"firstName\">First Name</FormLabel>\n            </Box>\n          </Cell>\n          <Cell left={3} top={3} width={2}>\n            <Text name=\"firstName\" />\n          </Cell>\n          <Cell left={2} top={4}>\n            <Box>\n              <FormLabel htmlFor=\"lastName\">Last Name</FormLabel>\n            </Box>\n          </Cell>\n          <Cell left={3} top={4} width={2}>\n            <Text name=\"lastName\" />\n          </Cell>\n          <Cell left={2} top={5}>\n            <Box>\n              <FormLabel htmlFor=\"lastName\">\n                Preferred method of contact\n              </FormLabel>\n            </Box>\n          </Cell>\n          <Cell left={3} top={5} width={2}>\n            <ButtonGroup>\n              <Button>Email</Button>\n              <Button>Phone</Button>\n              <Button>Dont contact me</Button>\n            </ButtonGroup>\n          </Cell>\n          <Cell left={3} top={6} width={2}>\n            <Button>Submit</Button>\n          </Cell>\n        </Grid>\n      </Container>\n\n      {/* <Button>test</Button> */}\n    </GEL>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}